{"version":3,"sources":["App.js","components/Header/Header.js","utils/Constants.js","utils/Utils.js","components/MusicalClock/MusicalClock.js","components/TIGroup/TIGroup.js","components/PLRGroup/PLRGroup.js","index.js"],"names":["App","Container","className","Row","math","href","target","to","React","Component","Header","Navbar","bg","variant","expand","fluid","Toggle","aria-controls","Collapse","id","Nav","C_MAJOR_TRIAD","TWELVE_TONE_TO_NOTE_MAPPING","mod","n","m","convertToNotationTriad","triad","map","note","join","mapVertex","windowWidth","windowHeight","MusicalClock","this","props","linePoints","v1","v2","v3","calculateLinePoints","width","height","x","y","sides","radius","stroke","strokeWidth","text","fontSize","points","TIGroup","componentDidMount","window","addEventListener","handleResize","componentWillUnmount","removeEventListener","setState","innerWidth","innerHeight","handleTranspose","state","transposition","transpositionVal","parseInt","newTriad","handleInversion","inversion","inversionVal","triadNotation","Col","Form","onSubmit","e","preventDefault","Group","controlId","Label","Control","type","value","onChange","Button","onClick","engraverParams","scale","notation","PLRGroup","invertBy","handleParallelOperation","handleLeadingToneOperation","handleRelativeOperation","ReactDOM","render","path","element","document","getElementById"],"mappings":"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","file":"static/js/main.7d63a606.chunk.js","sourcesContent":["import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport { NavLink } from \"react-router-dom\";\nimport { InlineMath } from 'react-katex';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Container className=\"App\">\n        <Row className=\"row-title\">\n          <h1 className=\"title\">Group Actions on Music</h1>\n        </Row>\n        <Row className=\"blurb\">\n          <p>This webapp contains tools that explore the group actions of music on the Dihedral group <InlineMath math=\"D_{12}\"/> discussed in <i>Musical Actions on Dihedral Groups</i> (paper can be found <a href=\"https://arxiv.org/abs/0711.1873\" target=\"_blank\">here</a>). In particular, the tools allow users to play around with group operations, visualize the group actions, and listen to the musical output.</p>\n        </Row>\n        <Row className=\"blurb\">\n          <p>For a brief, high level discussion of <InlineMath math=\"D_{12}\"/>, the Dihedral group of order 24, it is generated by two elements: <InlineMath math=\"s\"/> and <InlineMath math=\"t\"/></p>\n\n          <ul>\n            <li> <InlineMath math=\"s\"/> can be thought of as rotating a vertex of a regular polygon to another vertex. In the case of <InlineMath math=\"D_{12}\"/>, <InlineMath math=\"s\"/> has order 12. </li>\n            <li> <InlineMath math=\"t\"/> can be thought of as reflecting a regular polygon over an axis. For any Dihedral group, <InlineMath math=\"t\"/> has order 2. </li>\n            <li> Note that <InlineMath math=\"tst = s^{-1}\"/>. Thus, <InlineMath math=\"s\"/> and <InlineMath math=\"t\"/> generate any Dihedral group. </li>\n          </ul>\n        </Row>\n        <Row className=\"blurb\">\n          <p>For a brief, high level discussion of Serialism, the music analysis technique used in the paper, notes can be partioned into pitch classes. An octave can be divided into 12 semitone pitch classes. Thus we can operate on notes under modulo 12. For example</p>\n          <ul>\n            <li> The note C corresponds with the number 0, C# corresponds with the number 1, and G corresponds with the number 7.</li>\n            <li> If we \"add\" C# and G together, we get <InlineMath math=\"1 + 7 = 8\"/>, which corresponds with the note A♭. </li>\n            <li> If we \"add\" G and G together, we get <InlineMath math=\"7 + 7 \\equiv 2 \\pmod{12}\"/>, which corresponds with the note D. </li>\n            <li> Note that enharmonic notes correspond to the same pitch class, so G# and A♭ both correspond with the pitch class 8. </li>\n            <li> Also note that notes that are octaves apart belong to the same pitch class.</li>\n          </ul>\n        </Row>\n        <Row className=\"blurb\">\n          <p>One last thing to note is that the paper and this webapp focus on consonant triads (i.e. major and minor triads). These triads can be seen as subsets of the pitch classes. For example</p>\n          <ul>\n            <li> The C major triad consists of pitch classes (0, 4, 7) </li>\n            <li> The C minor triad consists of pitch classes (0, 3, 7) </li>\n          </ul>\n\n        </Row>\n        <Row className=\"blurb\">\n          <p className=\"link-paragraph\">Below are links to the pages with the tools I developed for the T/I Group and PLR Group discussed in the paper (also can be navigated to from the navbar on top). Each page contains a description of how the group works and then contains the interactive tool at the bottom.</p>\n          <ul>\n            <li> <NavLink to=\"/ti\" className=\"nav-link\">T/I Group</NavLink></li>\n            <li> <NavLink to=\"/plr\" className=\"nav-link\">PLR Group</NavLink> </li>\n          </ul>\n        </Row>\n        <Row className=\"blurb\">\n          <p> This webapp was developed using React and react-abc, a javascript library for rendering music using abc music notation (<a href=\"https://github.com/fuhton/react-abc\" target=\"_blank\">https://github.com/fuhton/react-abc</a>).</p>\n          <p>Source code can be found <a href=\"https://github.com/michaelli00/d24-music\" target=\"_blank\">here</a>.</p>\n        </Row>\n\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport Container from 'react-bootstrap/container';\nimport Navbar from 'react-bootstrap/navbar';\nimport Nav from 'react-bootstrap/nav';\nimport { NavLink } from \"react-router-dom\";\n\nimport './Header.css';\n\nfunction Header() {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n      <Container fluid className=\"Header\">\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"me-auto\">\n            <NavLink to=\"/\" className=\"nav-link\">Home</NavLink>\n            <NavLink to=\"/ti\" className=\"nav-link\">T/I Group</NavLink>\n            <NavLink to=\"/plr\" className=\"nav-link\">PLR Group</NavLink>\n          </Nav>\n        </Navbar.Collapse>\n      </Container>\n  </Navbar>\n  );\n}\n\nexport default Header;\n","const C = 0;\nconst C_SHARP = 1;\nconst D = 2;\nconst D_SHARP = 3;\nconst E = 4;\nconst F = 5;\nconst F_SHARP = 6;\nconst G = 7;\nconst A_FLAT = 8;\nconst A = 9;\nconst B_FLAT = 10;\nconst B = 11;\n\nexport const C_VERTEX = [280, 105];\nexport const E_VERTEX = [455, 405];\nexport const G_VERTEX = [180, 475];\n\nexport const VERTEX_MAPPING = [\n  [280, 105],\n  [380, 135],\n  [450, 205],\n  [480, 305],\n  [455, 405],\n  [380, 480],\n  [280, 505],\n  [180, 475],\n  [105, 405],\n  [80, 305],\n  [105, 205],\n  [180, 135],\n];\n\nexport const MAJOR_TRIADS_MAPPING = [\n  [0, 4, 7],\n  [1, 5, 8],\n  [2, 6, 9],\n  [3, 7, 10],\n  [4, 8, 11],\n  [5, 9, 0],\n  [6, 10, 1],\n  [7, 11, 2],\n  [8, 0, 3],\n  [9, 1, 4],\n  [10, 2, 5],\n  [11, 3, 6],\n];\n\nexport const C_MAJOR_TRIAD = [0, 4, 7];\n\nexport const TWELVE_TONE_TO_NOTE_MAPPING = ['C', '_D', 'D', '_E', 'E', 'F', '_G', 'G', '_A', 'A', '_B', 'B']\n","import { TWELVE_TONE_TO_NOTE_MAPPING } from './Constants';\n\n\n// weird javascript modulo bug https://stackoverflow.com/questions/4467539/javascript-modulo-gives-a-negative-result-for-negative-numbers\nexport const mod = (n, m) => {\n  return ((n % m) + m) % m;\n}\n\nexport const calculateLinePoints = (triad, windowWidth, windowHeight) => {\n  const v1 = mapVertex(triad[0], windowWidth, windowHeight);\n  const v2 = mapVertex(triad[1], windowWidth, windowHeight);\n  const v3 = mapVertex(triad[2], windowWidth, windowHeight);\n  return [...v1, ...v2, ...v3, ...v1];\n};\n\nexport const convertToNotationTriad = triad => {\n  const notationArray = triad.map(note => TWELVE_TONE_TO_NOTE_MAPPING[note]);\n  return notationArray.join('');\n\n};\n\nconst mapVertex = (note, windowWidth, windowHeight) => {\n  switch (note) {\n    case 0:\n      return [windowWidth*0.2, windowHeight/3 - 195];\n    case 1:\n      return [windowWidth*0.2 + 100, windowHeight/3 - 170];\n    case 2: \n      return [windowWidth*0.2 + 170, windowHeight/3 - 100];\n    case 3: \n      return [windowWidth*0.2 + 195, windowHeight/3];\n    case 4: \n      return [windowWidth*0.2 + 170, windowHeight/3 + 100];\n    case 5: \n      return [windowWidth*0.2 + 100, windowHeight/3 + 170];\n    case 6: \n      return [windowWidth*0.2, windowHeight/3 + 195];\n    case 7: \n      return [windowWidth*0.2 - 100, windowHeight/3 + 170];\n    case 8: \n      return [windowWidth*0.2 - 170, windowHeight/3 + 100];\n    case 9: \n      return [windowWidth*0.2 - 195, windowHeight/3];\n    case 10: \n      return [windowWidth*0.2 - 170, windowHeight/3 - 100];\n    case 11: \n      return [windowWidth*0.2 - 100, windowHeight/3 - 170];\n  }\n};\n","import React from 'react';\nimport { \n  Stage, \n  Layer, \n  RegularPolygon, \n  Line,\n  Label, \n  Text \n} from 'react-konva';\nimport { calculateLinePoints } from '../../utils/Utils';\n\nclass MusicalClock extends React.Component {\n\n  render() {\n    const {\n      windowWidth,\n      windowHeight,\n      triad,\n    } = this.props;\n    const linePoints = calculateLinePoints(triad, windowWidth, windowHeight);\n    return (\n      <Stage width={800} height={600}>\n        <Layer>\n          <RegularPolygon\n            x={windowWidth*0.2}\n            y={windowHeight/3}\n            sides={12}\n            radius={200}\n            stroke='black'\n            strokeWidth={2}\n          />\n          <Label\n            x={windowWidth*0.2 - 5}\n            y={windowHeight/3 - 230}\n          >\n            <Text text=\"C\" fontSize={20}/>\n          </Label>\n          <Label\n            x={windowWidth*0.2 + 95}\n            y={windowHeight/3 - 200}\n          >\n            <Text text=\"C#/D♭\" fontSize={20}/>\n          </Label>\n          <Label\n            x={windowWidth*0.2 + 175}\n            y={windowHeight/3 - 130}\n          >\n            <Text text=\"D\" fontSize={20}/>\n          </Label>\n          <Label\n            x={windowWidth*0.2 + 210}\n            y={windowHeight/3 - 10}\n          >\n            <Text text=\"D#/E♭\" fontSize={20}/>\n          </Label>\n          <Label\n            x={windowWidth*0.2 + 175}\n            y={windowHeight/3 + 110}\n          >\n            <Text text=\"E\" fontSize={20}/>\n          </Label>\n          <Label\n            x={windowWidth*0.2 + 100}\n            y={windowHeight/3 + 185}\n          >\n            <Text text=\"F\" fontSize={20}/>\n          </Label>\n          <Label\n            x={windowWidth*0.2 - 5}\n            y={windowHeight/3 + 210}\n          >\n            <Text text=\"F#/G♭\" fontSize={20}/>\n          </Label>\n          <Label\n            x={windowWidth*0.2 - 110}\n            y={windowHeight/3 + 185}\n          >\n            <Text text=\"G\" fontSize={20}/>\n          </Label>\n          <Label\n            x={windowWidth*0.2 - 220}\n            y={windowHeight/3 + 110}\n          >\n            <Text text=\"G#/A♭\" fontSize={20}/>\n          </Label>\n          <Label\n            x={windowWidth*0.2 - 235}\n            y={windowHeight/3 - 10}\n          >\n            <Text text=\"A\" fontSize={20}/>\n          </Label>\n          <Label\n            x={windowWidth*0.2 - 225}\n            y={windowHeight/3 - 125}\n          >\n            <Text text=\"A#/B♭\" fontSize={20}/>\n          </Label>\n          <Label\n            x={windowWidth*0.2 - 130}\n            y={windowHeight/3 - 200}\n          >\n            <Text text=\"B\" fontSize={20}/>\n          </Label>\n          <Line points={linePoints} strokeWidth={3} stroke=\"red\"/>\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\nexport default MusicalClock;\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport { Notation, Midi } from 'react-abc';\nimport { InlineMath } from 'react-katex';\nimport MusicalClock from'../MusicalClock/MusicalClock';\nimport { C_MAJOR_TRIAD } from '../../utils/Constants';\nimport { convertToNotationTriad, mod } from '../../utils/Utils';\nimport './TIGroup.css';\n\nclass TIGroup extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      windowWidth: window.innerWidth,\n      windowHeight: window.innerHeight,\n      triad: C_MAJOR_TRIAD,\n      transposition: 0,\n      inversion: 0,\n    };\n  }\n\n  componentDidMount = () => {\n    window.addEventListener('resize', this.handleResize);\n  }\n\n  componentWillUnmount = () => {\n    window.removeEventListener('resize', this.handleResize);\n  }\n  \n  handleResize = () => {\n    this.setState({ \n      windowWidth: window.innerWidth, \n      windowHeight: window.innerHeight \n    });\n  }\n\n  handleTranspose = () => {\n    const { triad, transposition } = this.state;\n    const transpositionVal = mod(parseInt(transposition), 12);\n    const newTriad = triad.map(note => (note + transpositionVal) % 12);\n    this.setState({ triad: newTriad });\n  }\n\n  handleInversion = () => {\n    const { triad, inversion } = this.state;\n    const inversionVal = mod(parseInt(inversion), 12);\n    const newTriad = triad.map(note =>  mod(-1*note + inversionVal, 12));\n    this.setState({ triad: newTriad });\n  }\n\n  render() {\n    const {\n      triad,\n      transposition,\n      inversion,\n      windowWidth,\n      windowHeight,\n    } = this.state;\n\n    const triadNotation = `L:1\\n[${convertToNotationTriad(triad)}]`;\n    return (\n      <Container className=\"TIGroup\">\n        <Row className=\"row-title\">\n          <h1 className=\"title\">Transposition/Inversion Group</h1>\n        </Row>\n        <Row className=\"blurb\">\n          <p>Under music serialism, we can move pitch class sets using two types of operations: transposition and inversion</p>\n          <ul>\n            <li> Transpositions move pitch classes up and down. \n              <ul>\n                <li>Here the operation can be thought of as <InlineMath math=\"T_n: Z_{12} \\rightarrow Z_{12}\"/> where <InlineMath math=\"T_n(x) = x + n \\pmod{12}\"/>.</li>\n                <li> In terms of music, this means we add n to the pitch class. For example <InlineMath math=\"T_4(0) = 4\"/> corresponds to transposing the note C to the note E.</li>\n                <li> When working with triads and pitch class sets, transposition is applied to each pitch class in the pitch class set. For example, <InlineMath math=\"T_4(0, 4, 7) = (4, 8, 11)\"/> corresponds to transposing a C major chord to an E major chord. Important thing to note is that transposition is closed under consonant chords.</li>\n                <li> Under <InlineMath math=\"D_{24}\"/>, the operation <InlineMath math=\"T_n\"/> can be thought of as rotating a 12-gon by 30°.</li>\n              </ul>\n            </li>\n            <li> Inversions reflect pitch classes over a fixed axis.\n              <ul>\n                <li> For people unfamiliar with serial analysis, an important distinction here is that serial inversion is NOT the same as chord inversions. The paper and this webapp focus on serial inversions. </li>\n                <li>Here the operation can be thought of as <InlineMath math=\"I_n: Z_{12} \\rightarrow Z_{12}\"/> where <InlineMath math=\"I_n(x) = -x + n \\pmod{12}\"/>.</li>\n                <li> In terms of music, this means we add n to the pitch class' inverse. For example <InlineMath math=\"I_6(2) = 4\"/> corresponds to transforming the note D to the note E.</li>\n                <li> When working with triads and pitch class sets, inversion is applied to each pitch class in the pitch class set. For example, <InlineMath math=\"I_0(0, 4, 7) = (0, 8, 5)\"/> corresponds to transforming a C major chord into a F minor chord. Important thing to note is that inversion is closed under consonant chords.</li>\n                <li> Under <InlineMath math=\"D_{24}\"/>, the operation <InlineMath math=\"I_n\"/> can be thought of as reflecting over a particular axis. For example, <InlineMath math=\"I_0\"/> can be thought of reflecting over the vertical axis.</li>\n              </ul>\n            </li>\n          </ul>\n          <p>For completeness, note that <InlineMath math=\"T_1\"/> generates all possible <InlineMath math=\"T_n\"/> (and has order 12) and that <InlineMath math=\"T_n I_0 = I_n\"/>. Thus <InlineMath math=\"T_1\"/> can be thought of as <InlineMath math=\"s\"/> and <InlineMath math=\"I_0\"/> can be thought of as <InlineMath math=\"t\"/>, so they generate <InlineMath math=\"D_{12}\"/></p>\n        </Row>\n        <Row className=\"blurb\">\n          Below is a visualization of the Transposition/Inversion Group. The tool starts off with a C major chord but allows the user to apply serial transposition and inversion to the chord, after they click the corresponding button, to yield another consonant chord. The operation will update the 12-gon diagram, showing the subset of pitch classes the operation yielded, and will display the corresponding musical chord. Finally, the user can play back the chord audio.\n        </Row>\n        <Row className=\"blurb\">\n          <p><b>IMPLEMENTATION NOTES</b>: chord presentation is not entirely correct. Although it is enharmonically equivalent (and will sound the same), the notation is not always correct. For example, a D major chord consists of pitches D, F#, A. However, here it is represented by the pitches D, G♭, A. For code simplicity, we restrict to only using flat notation. This is a known bug and will be fixed later.</p>\n          <p>\n            Furthermore, although sanization for transposition and inversion input has been implemented, both still accept integers that would normally be outside of the scope of serial analysis. For example, 101231231 can be inputed even though in reality we only operate from -11 to 11 for transpositions and inversions. Inputting a large integer doesn't break the app, though it is more difficult to interpret what a transposition by 101231231 is rather than transposition by 11.\n          </p>\n        </Row>\n        <Row className=\"input-row\">\n          <Col className=\"left-col\">\n            <Form onSubmit={e => e.preventDefault()}>\n              <Form.Group className=\"mb-3\" controlId=\"transposeNumber\">\n                <Form.Label className=\"form-label\">Transpose by</Form.Label>\n                <span className=\"form-row\">\n                  <Form.Control \n                    type=\"number\"\n                    value={transposition}\n                    onChange={e => this.setState({transposition: e.target.value})}\n                  />\n                  <Button variant=\"primary\" type=\"button\" onClick={this.handleTranspose} className=\"pull-right\">\n                    Transpose\n                  </Button>\n                </span>\n              </Form.Group>\n            </Form>\n          </Col>\n          <Col className=\"right-col\"> \n            <Form onSubmit={e => e.preventDefault()}>\n              <Form.Group className=\"mb-3\" controlId=\"inversionNumber\">\n                <Form.Label className=\"form-label\">Invert by</Form.Label>\n                <span className=\"form-row\">\n                  <Form.Control \n                    type=\"number\"\n                    value={inversion}\n                    onChange={e => this.setState({inversion: e.target.value})}\n                  />\n                  <Button variant=\"primary\" type=\"button\" onClick={this.handleInversion}>\n                    Invert\n                  </Button>\n                </span>\n              </Form.Group>\n            </Form>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <MusicalClock\n              windowWidth={windowWidth}\n              windowHeight={windowHeight}\n              triad={triad}\n            />\n          </Col>\n          <Col className=\"notation-col\">\n            <Notation\n              engraverParams={{scale: 3}}\n              notation={triadNotation} \n            />\n            <Midi\n              key={triadNotation}\n              notation={triadNotation}\n            />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default TIGroup;\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { Notation, Midi } from 'react-abc';\nimport { InlineMath } from 'react-katex';\nimport MusicalClock from'../MusicalClock/MusicalClock';\nimport { C_MAJOR_TRIAD } from '../../utils/Constants';\nimport { convertToNotationTriad, mod } from '../../utils/Utils';\n\nimport './PLRGroup.css';\n\nclass PLRGroup extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      windowWidth: window.innerWidth,\n      windowHeight: window.innerHeight,\n      triad: C_MAJOR_TRIAD,\n    };\n  }\n\n  componentDidMount = () => {\n    window.addEventListener('resize', this.handleResize);\n  }\n\n  componentWillUnmount = () => {\n    window.removeEventListener('resize', this.handleResize);\n  }\n  \n  handleResize = () => {\n    this.setState({ \n      windowWidth: window.innerWidth, \n      windowHeight: window.innerHeight \n    });\n  }\n\n  invertBy = (triad, inversion) => {\n    const inversionVal = mod(parseInt(inversion), 12);\n    const newTriad = triad.map(note =>  mod(-1*note + inversionVal, 12));\n    return newTriad;\n  }\n\n  handleParallelOperation = () => {\n    const { triad } = this.state;\n    this.setState({triad: this.invertBy(triad, triad[0] + triad[2]) });\n  }\n\n  handleLeadingToneOperation = () => {\n    const { triad } = this.state;\n    this.setState({triad: this.invertBy(triad, triad[1] + triad[2]) });\n  }\n\n  handleRelativeOperation = () => {\n    const { triad } = this.state;\n    this.setState({triad: this.invertBy(triad, triad[0] + triad[1]) });\n  }\n\n  render() {\n    const {\n      triad,\n      windowWidth,\n      windowHeight,\n    } = this.state;\n\n    const triadNotation = `L:1\\n[${convertToNotationTriad(triad)}]`;\n\n    return (\n      <Container className=\"PLRGroup\">\n        <Row className=\"row-title\">\n          <h1 className=\"title\">Parallel, Leading Tone, Relative Group</h1>\n        </Row>\n        <Row className=\"blurb\">\n          <p>Under music serialism, we can also move pitch class sets using three types of operations: parallel, leading tone, and relative. These operations rely on the inversion operator discussed in the T/I Group. The paper mentions that these operations create <i>contextual inversion</i> since the axis of reflection depends on the input triad.</p>\n          <ul>\n            <li>Parallel maps a major triad to its parallel minor triad\n              <ul>\n                <li>Here the operation can be thought of as <InlineMath math=\"P(y_1, y_2, y_3) = I_{y_1 + y_3} (y_1, y_2, y_3)\"/>.</li>\n                <li> In terms of musical serialism, note that the parallel operation ends up swapping the first and third pitch classes from the set. For example <InlineMath math=\"P(0, 4, 7) = (7, 3, 0)\"/> corresponds to mapping a C major chord to a C minor chord, which is the corresponding parallel minor chord.</li>\n                <li> From the paper, the axis of reflection for the parallel operation is spanned by <InlineMath math=\"(\\frac{y_1 + y_3}{2}, \\frac{y_1 + y_3}{2} + 6)\"/>. For example, for <InlineMath math=\"P(0, 4, 7) = (7, 3, 0)\"/>, the axis of reflection is (3.5, 9.5), so the line that goes from inbetween E♭ and E to inbetween A and B♭. </li>\n              </ul>\n            </li>\n            <li>Leading tone maps a major triad to a minor triad by lowering the root by a semitone\n              <ul>\n                <li>Here the operation can be thought of as <InlineMath math=\"L(y_1, y_2, y_3) = I_{y_2 + y_3} (y_1, y_2, y_3)\"/>.</li>\n                <li> In terms of musical serialism, note that the leading tone operation ends up swapping the second and third pitch classes from the set. For example <InlineMath math=\"L(0, 4, 7) = (11, 7, 4)\"/> corresponds to mapping a C major chord to an E minor chord.</li>\n                <li> From the paper, the axis of reflection for the parallel operation is spanned by <InlineMath math=\"(\\frac{y_2 + y_3}{2}, \\frac{y_2 + y_3}{2} + 6)\"/>. For example, for <InlineMath math=\"L(0, 4, 7) = (11, 7, 4)\"/>, the axis of reflection is (5.5, 11.5), so the line that goes from inbetween F and G♭ to inbetween B and C. </li>\n              </ul>\n            </li>\n            <li>Relative maps a major triad to its relative minor triad\n              <ul>\n                <li>Here the operation can be thought of as <InlineMath math=\"R(y_1, y_2, y_3) = I_{y_1 + y_2} (y_1, y_2, y_3)\"/>.</li>\n                <li> In terms of musical serialism, note that the leading tone operation ends up swapping the first and second pitch classes from the set. For example <InlineMath math=\"R(0, 4, 7) = (4, 0, 9)\"/> corresponds to mapping a C major chord to an E minor chord.</li>\n                <li> From the paper, the axis of reflection for the parallel operation is spanned by <InlineMath math=\"(\\frac{y_1 + y_2}{2}, \\frac{y_1 + y_2}{2} + 6)\"/>. For example, for <InlineMath math=\"R(0, 4, 7) = (4, 0, 9)\"/>, the axis of reflection is (2, 8), so the line that goes from D to A♭. </li>\n              </ul>\n            </li>\n          </ul>\n          <p>For completeness, the paper proved that <InlineMath math=\"LR\"/> (order 12) can be thought of as <InlineMath math=\"s\"/> and that <InlineMath math=\"L\"/> (order 2) can be thought of as <InlineMath math=\"t\"/>. Also note that <InlineMath math=\"R(LR)^3 = P\"/>. Thus <InlineMath math=\"LR\"/> and <InlineMath math=\"L\"/> generate the PLR Group.</p>\n        </Row>\n        <Row className=\"input-row\">\n          <Col className=\"left-col\">\n            <Button variant=\"primary\" type=\"button\" onClick={this.handleParallelOperation} className=\"pull-right\"> Parallel </Button>\n          </Col>\n          <Col className=\"right-col\"> \n            <Button variant=\"primary\" type=\"button\" onClick={this.handleLeadingToneOperation}> Leading Tone </Button>\n          </Col>\n          <Col className=\"right-col\"> \n            <Button variant=\"primary\" type=\"button\" onClick={this.handleRelativeOperation}> Relative </Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <MusicalClock\n              windowWidth={windowWidth}\n              windowHeight={windowHeight}\n              triad={triad}\n            />\n          </Col>\n          <Col className=\"notation-col\">\n            <Notation\n              engraverParams={{scale: 3}}\n              notation={triadNotation} \n            />\n            <Midi\n              key={triadNotation}\n              notation={triadNotation}\n            />\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default PLRGroup;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { \n  HashRouter,\n  Routes,\n  Route,\n} from \"react-router-dom\";\nimport App from './App';\nimport Header from './components/Header/Header';\nimport TIGroup from './components/TIGroup/TIGroup';\nimport PLRGroup from './components/PLRGroup/PLRGroup';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'katex/dist/katex.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <HashRouter>\n    <Header/>\n    <Routes>\n      <Route\n        path=\"/\"\n        element={<App/>}\n      />\n      <Route\n        path=\"/ti\"\n        element={<TIGroup/>}\n      />\n      <Route\n        path=\"/plr\"\n        element={<PLRGroup/>}\n      />\n    </Routes>\n  </HashRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}